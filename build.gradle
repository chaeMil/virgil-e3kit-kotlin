/*
 * Copyright (c) 2015-2019, Virgil Security, Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     (1) Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *     (3) Neither the name of virgil nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {
    ext.versions = [
            // Virgil
            virgilSdk   : '5.1.2',
            virgilCrypto: '0.8.0',
            pythia      : '0.3.1',
            keyknox     : '0.2.1',

            // Kotlin
            kotlin      : '1.3.40',
            coroutines  : '1.3.0-M1',

            // Gradle
            gradle      : '3.4.2',

            // Maven
            mavenPublish: '3.6.2',

            // Android
            android     : '4.1.1.4',

            // Docs
            dokka       : '0.9.18',

            // Tests
            junit       : '4.12',
            testsRunner : '1.0.2',
            espresso    : '3.0.2',
    ]
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$versions.gradle"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$versions.dokka"
        classpath "digital.wup:android-maven-publish:$versions.mavenPublish"
    }
}

allprojects {
    repositories {
        mavenLocal()
        google()
        jcenter()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Default value is ALL
enum ArtifactType {
    ALL,
    COMMON,
    STANDARD
}

static String getArtifactType(Project project) {
    def systemProperty = null
    if (System.getenv('ARTIFACT_TYPE') != null)
        systemProperty = System.getenv('ARTIFACT_TYPE')
    if (System.getProperty('ARTIFACT_TYPE') != null)
        systemProperty = System.getProperty('ARTIFACT_TYPE')

    if (systemProperty != null)
        return systemProperty
    else if (project.hasProperty('ARTIFACT_TYPE')) {
        return project.findProperty('ARTIFACT_TYPE')
    } else {
        return ArtifactType.ALL
    }
}

task installEthree() {
    def artifactType
    try {
        artifactType = getArtifactType(project) as ArtifactType
    } catch (IllegalArgumentException ignored) {
        throw new IllegalArgumentException("Please, choose one of the available types: " + ArtifactType.values() + "."
                + " You entered: " + getArtifactType(project))
    }

    if (artifactType == ArtifactType.STANDARD) {
        dependsOn ':ethree-kotlin:publishToMavenLocal'
    } else if (artifactType == ArtifactType.ALL) {
        dependsOn ':ethree-common:publishToMavenLocal', ':ethree-kotlin:publishToMavenLocal'
    } else if (artifactType == ArtifactType.COMMON) {
        dependsOn ':ethree-common:publishToMavenLocal'
    } else {
        throw new IllegalArgumentException("Please, choose one of artifacts type: " + ArtifactType.values())
    }
}

task publishEthree() {
    def artifactType
    try {
        artifactType = getArtifactType(project) as ArtifactType
    } catch (IllegalArgumentException ignored) {
        throw new IllegalArgumentException("Please, choose one of the available types: " + ArtifactType.values() + "."
                + " You entered: " + getArtifactType(project))
    }

    if (artifactType == ArtifactType.STANDARD) {
        dependsOn ':ethree-kotlin:publish'
    } else if (artifactType == ArtifactType.ALL) {
        dependsOn ':ethree-common:publish', ':ethree-kotlin:publish'
    } else if (artifactType == ArtifactType.COMMON) {
        dependsOn ':ethree-common:publish'
    } else {
        throw new IllegalArgumentException("Please, choose one of artifacts type: " + ArtifactType.values())
    }
}
